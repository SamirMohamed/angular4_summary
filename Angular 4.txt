- Template Syntax
	- Data binding
		- Interpolation " {{ }} "
			- the text between the braces is a template expression that Angular first evaluates and then converts to a string and The expression can invoke methods of the host component.

			- Angular evaluates all expressions in double curly braces, converts the expression results to strings, and links them with neighboring literal strings. Finally, it assigns this composite interpolated result to an element or directive property.

			- Interpolation is a special syntax that Angular converts into a property binding.
		
		- Template expressions
			- A template expression produces a value. Angular executes the expression and assigns it to a property of a binding target; the target might be an HTML element, a component, or a directive.

			- JavaScript expressions that have or promote side effects are prohibited, including:
				. assignments (=, +=, -=, ...)
				. new
				. chaining expressions with ; or ,
				. increment and decrement operators (++ and --)

			Other notable differences from JavaScript syntax include:
				. no support for the bitwise operators | and &
				. new template expression operators, such as |, ?. and !.
			
		- Expression context
			- The expression context is typically the component instance. In the following snippets, the title within double-curly braces and the isUnchanged in quotes refer to properties  of the AppComponent.
				` {{title}}
				<span [hidden]="isUnchanged">changed</span> `
			
			- An expression may also refer to properties of the template's context such as a template input variable (let hero) or a template reference variable (#heroInput).
				` <div *ngFor="let hero of heroes">{{hero.name}}</div>
				<input #heroInput> {{heroInput.value}} `
			
			- The context for terms in an expression is a blend of the template variables, the directive's context object (if it has one), and the component's members. If you reference a name that belongs to more than one of these namespaces, the template variable name takes precedence, followed by a name in the directive's context, and, lastly, the component's member names.

			The previous example presents such a name collision. The component has a hero property and the *ngFor defines a hero template variable. The hero in {{hero.name}} refers to the template input variable, not the component's property.

			Template expressions cannot refer to anything in the global namespace (except undefined). They can't refer to window or document. They can't call console.log or Math.max. They are restricted to referencing members of the expression context.
		
		- Expression guidelines
			Template expressions can make or break an application. Please follow these guidelines:

				No visible side effects
				Quick execution
				Simplicity
				Idempotence

			The only exceptions to these guidelines should be in specific circumstances that you thoroughly understand.
			No visible side effects

			A template expression should not change any application state other than the value of the target property.

			This rule is essential to Angular's "unidirectional data flow" policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.
			Quick execution

			Angular executes template expressions after every change detection cycle. Change detection cycles are triggered by many asynchronous activities such as promise resolutions, http results, timer events, keypresses and mouse moves.

			Expressions should finish quickly or the user experience may drag, especially on slower devices. Consider caching values when their computation is expensive.
			Simplicity

			Although it's possible to write quite complex template expressions, you should avoid them.

			A property name or method call should be the norm. An occasional Boolean negation (!) is OK. Otherwise, confine application and business logic to the component itself, where it will be easier to develop and test.
			Idempotence

			An idempotent expression is ideal because it is free of side effects and improves Angular's change detection performance.

			In Angular terms, an idempotent expression always returns exactly the same thing until one of its dependent values changes.

			Dependent values should not change during a single turn of the event loop. If an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object (including an array), it returns the same object reference when called twice in a row.

		- Template statements
			- A template statement responds to an event raised by a binding target such as an element, component, or directive, appearing in quotes to the right of the = symbol as in (event)="statement".

			- Like template expressions, template statements use a language that looks like JavaScript. The template statement parser differs from the template expression parser and specifically supports both basic assignment (=) and chaining expressions (with ; or ,).

			However, certain JavaScript syntax is not allowed:

				. new
				. increment and decrement operators, ++ and --
				. operator assignment, such as += and -=
				. the bitwise operators | and &
				. the template expression operators
		
		- Statement context
			- The statement context may also refer to properties of the template's own context. In the following examples, the template $event object, a template input variable (let hero), and a template reference variable (#heroForm) are passed to an event handling method of the component.
			` <button (click)="onSave($event)">Save</button>
			<button *ngFor="let hero of heroes" (click)="deleteHero(hero)">{{hero.name}}</button>
			<form #heroForm (ngSubmit)="onSubmit(heroForm)"> ... </form> `

			- Template context names take precedence over component context names. In deleteHero(hero) above, the hero is the template input variable, not the component's hero property.

			- Template statements cannot refer to anything in the global namespace. They can't refer to window or document. They can't call console.log or Math.max.

		- A new mental model
			- once you start data binding, you are no longer working with HTML attributes. You aren't setting attributes. You are setting the properties of DOM elements, components, and directives.

			- HTML attribute vs. DOM property (link: https://angular.io/guide/template-syntax#html-attribute-vs-dom-property)
		
		- Binding targets
			- The target of a data binding is something in the DOM. Depending on the binding type, the target can be an (element | component | directive) property, an (element | component | directive) event, or (rarely) an attribute name.

			- for more details (link: https://angular.io/guide/template-syntax#binding-targets)

		- Binding Types
			-  Property Binding " [] "
				- The brackets tell Angular to evaluate the template expression. If you omit the brackets, Angular treats the string as a constant and initializes the target property with that string. It does not evaluate the string!

				- The following example initializes the prefix property of the HeroDetailComponent to a fixed string, not a template expression. Angular sets it and forgets about it and The [hero] binding, on the other hand, remains a live binding to the component's currentHero property.
				` <app-hero-detail prefix="You are my" [hero]="currentHero"></app-hero-detail> `

				- Property binding or interpolation?
					- Interpolation is a convenient alternative to property binding in many cases.
					- When rendering data values as strings, there is no technical reason to prefer one form to the other.
					- When setting an element property to a non-string data value, you must use property binding.

			- Attribute binding
				- This is the only exception to the rule that a binding sets a target property. This is the only binding that creates and sets an attribute.
				- This guide stresses repeatedly that setting an element property with a property binding is always preferred to setting the attribute with a string. Why does Angular offer attribute binding?
				- You must use attribute binding when there is no element property to bind (like: ARIA, SVG, and table span attributes).
				- syntax: [attr.attribute_name]

			- Class binding
				- A class binding is a good way to add or remove a single class.
				- ` <div class="bad curly special" [class]="badCurly">Bad curly</div> `
				reset/override all class names with a binding
				- syntax: [class.class_name]

			- Style binding
				- A style binding is an easy way to set a single style value.
				` <div [style.font-size]="isSpecial ? 'x-large' : 'smaller'" >
					This div is x-large or smaller.
				  </div> `
		
			- Event binding
			
			- Two-way binding ( [(...)] )
				- Angular offers a special two-way data binding syntax for this purpose, [(x)]. The [(x)] syntax combines the brackets of property binding, [x], with the parentheses of event binding, (x).
				- The [(x)] syntax is easy to demonstrate when the element has a settable property called x and a corresponding event named xChange.
		- Built-in attribute directives
			- ngClass 
				- You can bind to the ngClass to add or remove several classes simultaneously.
				- Try binding ngClass to a key:value control object. Each key of the object is a CSS class name; its value is true if the class should be added, false if it should be removed.

			- ngStyle
				- same as ngClass but for style.

			- ngModel " Two way binding "
				- link: https://angular.io/guide/template-syntax#ngmodel---two-way-binding-to-form-elements-with-ngmodel

		- Built-in structural directives
			- ngFor
				- The NgForOf directive may perform poorly, especially with large lists. A small change to one item, an item removed, or an item added can trigger a cascade of DOM manipulations.

				For example, re-querying the server could reset the list with all new hero objects.

				Most, if not all, are previously displayed heroes. You know this because the id of each hero hasn't changed. But Angular sees only a fresh list of new object references. It has no choice but to tear down the old DOM elements and insert all new DOM elements.

				Angular can avoid this churn with trackBy. Add a method to the component that returns the value NgForOf should track. In this case, that value is the hero's id.

				` trackByHeroes(index: number, hero: Hero): number { return hero.id; } `

				In the microsyntax expression, set trackBy to this method.

				` <div *ngFor="let hero of heroes; trackBy: trackByHeroes">
				({{hero.id}}) {{hero.name}}
				</div> `
		
		- Template input variable
			- *ngFor = "let hero in heros"  -> hero is template input variable
		
		- Template reference variable
			- A template reference variable is often a reference to a DOM element within a template. It can also be a reference to an Angular component or directive or a web component.
			- You can refer to a template reference variable anywhere in the template.
			- The scope of a reference variable is the entire template. Do not define the same variable name more than once in the same template. The runtime value will be unpredictable.

/////////////////////////////////////////////////////////////////////////////////////////////////

- Routing and Naviagation
	- Set the <base href>
		- The router uses the browser's history.pushState for navigation.
		- You must add a <base href> element to the app's index.html for pushState routing to work.
		- The browser uses the <base href> value to prefix relative URLs when referencing CSS files, scripts, and images.
	- Importing from the router library
		- The Router is in its own @angular/router package. It's not part of the Angular core. The router is an optional service because not all applications need routing and, depending on your requirements, you may need a different routing library.
	- Define routes
	- RouterOutlet
		- The RouterOutlet is a directive from the router library that marks the spot in the template where the router should display the views for that outlet.
		- The router adds the <router-outlet> element to the DOM and subsequently inserts the navigated view element immediately after the <router-outlet>.
	- RouterLink binding
	- RouterLinkActive binding
		- The RouterLinkActive directive toggles css classes for active RouterLinks based on the current RouterState. This cascades down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the [routerLinkActiveOptions] input binding with the { exact: true } expression. By using { exact: true }, a given RouterLink will only be active if its URL is an exact match to the current URL.
	- Wildcard route
		- A wildcard route has a path consisting of two asterisks. It matches every URL. The router will select this route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom "404 Not Found" component or redirect to an existing route.
		- The router selects the route with a first match wins strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the last route in the configuration.
	- Redirecting routes (link: http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes)
		- Add the default route somewhere above the wildcard route. It's just above the wildcard route in the following excerpt showing the complete appRoutes for this milestone.
		- A redirect route requires a pathMatch property to tell the router how to match a URL to the path of a route. The router throws an error if you don't.
	- Route configuration
		- Only call RouterModule.forRoot in the root AppRoutingModule (or the AppModule if that's where you register top level application routes). In any other module, you must call the RouterModule.forChild method to register additional routes.
	- switchMap
		- The switchMap operator also cancels previous in-flight requests. If the user re-navigates to this route with a new id while the HeroService is still retrieving the old id, switchMap discards that old request and returns the hero for the new id.
	- Observable paramMap and component reuse (link: https://angular.io/guide/router#observable-parammap-and-component-reuse)
		- In this example, you retrieve the route parameter map from an Observable. That implies that the route parameter map can change during the lifetime of this component.

		They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.

		Suppose a parent component navigation bar had "forward" and "back" buttons that scrolled through the list of heroes. Each click navigated imperatively to the HeroDetailComponent with the next or previous id.

		You don't want the router to remove the current HeroDetailComponent instance from the DOM only to re-create it for the next id. That could be visibly jarring. Better to simply re-use the same component instance and update the parameter.

		Unfortunately, ngOnInit is only called once per component instantiation. You need a way to detect when the route parameters change from within the same instance. The observable paramMap property handles that beautifully.